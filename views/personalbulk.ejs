<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Personal Contacts  Bulk Create</title>
  <!-- Bootstrap CSS -->
  <link 
    rel="stylesheet" 
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous"
  >
  <style>
    .sidebar {
      width: 250px;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
  }
  
  .content {
      margin-left: 250px;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      align-items: center; /* Center horizontally */
      justify-content: flex-start; /* Align content at the top */
      padding-top: 50px; /* Add spacing from the top */
      text-align: center;
  }
  
  
  
  .nav-link {
      font-size: 18px;
      padding: 10px;
  }
  
  .nav-link i {
      margin-right: 10px;
  }
  
  .nav-link:hover {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 5px;
  }
  
  .card {
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          transition: 0.3s;
      }
  
      .card:hover {
          transform: scale(1.05);
      }
    /* Set fixed height for table body with scrolling */
    .table-container {
      margin-left: 280px !important;
      margin: 50px;
      max-height: 500px; /* Set the fixed height */
      overflow-y: auto;  /* Enable vertical scrolling if content exceeds max height */
    }
  
    /* Make the table header fixed */
    .table thead th {
      position: sticky;
      top: 0; /* Keep it at the top */
      z-index: 1; /* Ensure it stays above the body */
      background-color: #343a40; /* Add background to header to differentiate */
    }
  
    /* Optional: Add a little padding to make the table look better */
    .table th, .table td {
      vertical-align: middle;
    }
  
    .container {
    display: flex;
    justify-content: center;
   
    
  }
  
  .container2 {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f8f9fa;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  textarea {
    margin-top: 50px;
    width: 80%; /* Adjust the width as needed */
    height: 200px; /* Adjust the height as needed */
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  input {
    margin-top: 50px;
  
    padding: 10px;
    font-size: 16px;
   
  
  }
  
  .footer-buttons {
    text-align: center;
    margin-top: 20px;
  }
  .container-count {
      margin-top: 25px;
      display: flex;
      justify-content: center;
      align-items: center; /* Add this line to center vertically */
  }
  
  </style>
</head>
<body>
  <!-- Navigation Bar -->
  <!-- <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="collapse navbar-collapse" id="navbarText">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item">
          <a class="nav-link" href="/pan-india-screen">Pan India</a>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/personal-screen"><span class="sr-only">(current)</span>Personal</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/bsp-party-screen">BSP Party Office</a>
        </li>
      </ul>
    </div>
  </nav> -->
  <%- include('partials/sidebar') %>
  <script>
    // Ensure fetchdata() runs when the page loads
    window.onload = fetchdata;
  </script>

<div class="container-count" style="display: flex; flex-direction: column;">
  <div id="statusText" style="margin-top: 15px; font-size: 16px;"></div>
  <p style="text-decoration: underline; font-size: 25px;" onclick="downloadTemplate()">Download Template</p>
</div>



<div class="container" style="margin-top: 250px;">
    <form id="createGroupForm">
      <div class="form-group">
        <label for="Group">Group Type</label>
        <select class="form-control" id="grouptype">
          <!-- Options will be populated dynamically -->
        </select>
      </div>
      <input type="file" id="excelFile" accept=".xlsx, .xls">
      <p id="status"></p>
      <pre id="output"></pre>
    </form>
  </div>

 

  <!-- Bootstrap JS and dependencies -->
  <script 
    src="https://code.jquery.com/jquery-3.2.1.slim.min.js" 
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" 
    crossorigin="anonymous">
  </script>
  <script 
    src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" 
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9JoAPpSa0z9I603Ct9r47jBWg9kQtQnx6D6/J" 
    crossorigin="anonymous">
  </script>
  <script 
    src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" 
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" 
    crossorigin="anonymous">
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
  <script>
    

 
    function fetchgroups() {
      const domain = 'https://whatsappserver.apbsp.com/group/fetchdetails';
      const jsonData = {
          logintableId: localStorage.getItem("user_id"),
      };
      console.log("jsonData", jsonData)
      fetch(domain, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch groups');
        }
        return response.json();
      })
      .then(data => {
        const dropdown = document.getElementById('grouptype');
        dropdown.innerHTML = ''; // Clear any existing options

        // Populate dropdown with fetched data
        data.forEach(group => {
          const option = document.createElement('option');
          option.value = group.id;
          option.textContent = group.grouptype;
          dropdown.appendChild(option);
        });
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Failed to fetch groups.');
      });
    }

    // Fetch groups when the page loads
    document.addEventListener('DOMContentLoaded', fetchgroups);


    
    document.getElementById('createButton').addEventListener('click', () => {
      const selectedGroup = document.getElementById('grouptype').value;
      const name = document.getElementById('name').value;
      const phonenumber = document.getElementById('phonenumber').value;

      if (!selectedGroup || !phonenumber) {
        alert('Please select a group and enter a group name.');
        return;
      }

      
      const jsonData = [{
        grouptableId: selectedGroup,
        name: name,
        phonenumber: phonenumber,
        logintableId: localStorage.getItem("user_id"),
      }];
                  const domain = 'https://whatsappserver.apbsp.com/phonenumber/create';

            fetch(domain, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    alert("Error in Createing");
                    
                }
                return response.json();
            })
            .then(data => {
                console.log('Success:', data);
                alert('Phone number and Group' +" "+ data);
                
                document.getElementById('groupname').value = "";
                // window.location.href = '/personal-screen'; // Added code to navigate to /personal-screen after successful group creation
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to create group.');
            });
      // Here you can send the data to the server or perform other actions
      // alert(`Group created with ID: ${selectedGroup} and Name: ${groupName}`);


    });
  </script>
</body>

<script src="../socket.io/socket.io.js"></script>
<script>

    const socket = io();
    socket.on('whatsapp-status', (data) => {
        if (data.scanned) {
            document.getElementById("statusText").innerHTML = `
                <p><strong>Status:</strong> Scanned ✅</p>
                <p><strong>Client Name:</strong> ${data.clientname}</p>
                <p><strong>Client Phone:</strong> ${data.clientphone}</p>
            `;
        } else {
            document.getElementById("statusText").innerHTML = "<p>Status: Not Scanned ❌</p>";
        }
    });
    socket.on('whatsapp-ready', (data) => {
        console.log("WhatsApp Web is ready! Reloading dashboard...");
        console.log("data", data)
        if (data.scanned) {
            document.getElementById("statusText").innerHTML = `
                <p><strong>Status:</strong> Scanned ✅</p>
                <p><strong>Client Name:</strong> ${data.clientname}</p>
                <p><strong>Client Phone:</strong> ${data.clientphone}</p>
            `;
        } else {
            document.getElementById("statusText").innerHTML = "<p>Status: Not Scanned ❌</p>";
        }
    });

    function chceckstatus(){
    let user_id = localStorage.getItem("user_id")
    console.log("user_id", user_id)
    if(user_id === null){
        window.location.href = '/login';
    }
}
chceckstatus();
</script>

<script>
    document.getElementById('excelFile').addEventListener('change', function(event) {
const file = event.target.files[0];
if (!file) return;

const reader = new FileReader();
reader.onload = async function(e) {
    const data = new Uint8Array(e.target.result);
    const workbook = XLSX.read(data, { type: 'array' });
    const sheetName = workbook.SheetNames[0];
    const sheet = workbook.Sheets[sheetName];
    const jsonArray = XLSX.utils.sheet_to_json(sheet, { header: 1 });

    if (jsonArray.length > 1) {
        const keys = jsonArray[0];
        const formattedArray = [];

        for (let i = 1; i < jsonArray.length; i++) {
            let obj = {};
            for (let j = 0; j < keys.length; j++) {
                let value = jsonArray[i][j];
                if (keys[j].toLowerCase().includes("phone")) {
                    value = String(value); // Ensure phone is string
                }
                obj[keys[j]] = value;
            }
            const grouptableId = document.getElementById('grouptype').value;
            let logintableId = localStorage.getItem("user_id")
            formattedArray.push({
                name: obj["name"], 
                phonenumber: obj["phonenumber"], 
                grouptableId: grouptableId,
                logintableId: logintableId,
            });
        }

        document.getElementById("status").innerText = `Total Records: ${formattedArray.length}`;

        console.log(`Total records to update: ${formattedArray.length}`);
        console.log(`Total records:`, formattedArray);
        await updateVoterTableInBatches(formattedArray, 10000); // Send in batches of 10,000
        // document.getElementById("status").innerText = "Update Completed!";
    }
};
reader.readAsArrayBuffer(file);
});

// Function to send data in chunks
async function updateVoterTableInBatches(data, batchSize) {
let totalBatches = Math.ceil(data.length / batchSize);

for (let i = 0; i < totalBatches; i++) {
    const batch = data.slice(i * batchSize, (i + 1) * batchSize);

    try {
        console.log(`Sending Batch ${i + 1}/${totalBatches} - Records: ${batch.length}`);
        if (i + 1 >= totalBatches) {
            document.getElementById("status").innerText = "Update Completed!";
        } else {
            document.getElementById("status").innerText = `Sending Batch ${i + 1}/${totalBatches} - Records: ${batch.length}`;
        }

        const response = await fetch("https://whatsappserver.apbsp.com/phonenumber/bulkinsert", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(batch), // Send the batch as an array
        });

        // const text = await response.text(); // Read as text first
        // console.log("Raw Server Response:", text);

        // const result = JSON.parse(text); // Try to parse JSON
        // console.log(`Batch ${i + 1} Response:`, result);
    } catch (error) {
        console.error(`Error updating Batch ${i + 1}:`, error);
    }
}
}

function downloadTemplate() {
            let today = new Date().toISOString().split('T')[0];
            // Create worksheet with column headers
            let worksheet = XLSX.utils.json_to_sheet([
                { name: "", phonenumber: "" } // Empty row for users to fill in
            ]);

            // Create a new workbook and append the worksheet
            let workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Template");

            // Convert workbook to binary and trigger download
            let excelBuffer = XLSX.write(workbook, { bookType: "xlsx", type: "array" });
            let blob = new Blob([excelBuffer], { type: "application/octet-stream" });
            let link = document.createElement("a");
            link.href = URL.createObjectURL(blob);
            link.download = `template_${today}.xlsx`;
            link.click();
        }

</script>
</html>
