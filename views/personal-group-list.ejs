<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Personal Contacts</title>
  <!-- Bootstrap CSS -->
  <link 
    rel="stylesheet" 
    href="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
    crossorigin="anonymous"
  >
  <style>
    .sidebar {
      width: 250px;
      height: 100vh;
      position: fixed;
      top: 0;
      left: 0;
  }
  
  .content {
      margin-left: 250px;
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      align-items: center; /* Center horizontally */
      justify-content: flex-start; /* Align content at the top */
      padding-top: 50px; /* Add spacing from the top */
      text-align: center;
  }
  
  
  
  .nav-link {
      font-size: 18px;
      padding: 10px;
  }
  
  .nav-link i {
      margin-right: 10px;
  }
  
  .nav-link:hover {
      background: rgba(255, 255, 255, 0.2);
      border-radius: 5px;
  }
  
  .card {
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          transition: 0.3s;
      }
  
      .card:hover {
          transform: scale(1.05);
      }
    /* Set fixed height for table body with scrolling */
    .table-container {
      margin-left: 280px !important;
      margin: 50px;
      max-height: 500px; /* Set the fixed height */
      overflow-y: auto;  /* Enable vertical scrolling if content exceeds max height */
    }
  
    /* Make the table header fixed */
    .table thead th {
      position: sticky;
      top: 0; /* Keep it at the top */
      z-index: 1; /* Ensure it stays above the body */
      background-color: #343a40; /* Add background to header to differentiate */
    }
  
    /* Optional: Add a little padding to make the table look better */
    .table th, .table td {
      vertical-align: middle;
    }
  
    .container {
    display: flex;
    justify-content: center;
   
    
  }
  
  .container2 {
      width: 90%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f8f9fa;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  
  textarea {
    margin-top: 50px;
    width: 80%; /* Adjust the width as needed */
    height: 200px; /* Adjust the height as needed */
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }
  input {
    margin-top: 50px;
  
    padding: 10px;
    font-size: 16px;
   
  
  }
  
  .footer-buttons {
    text-align: center;
    margin-top: 20px;
  }
  .container-count {
      margin-top: 25px;
      display: flex;
      justify-content: center;
      align-items: center; /* Add this line to center vertically */
  }
  </style>
</head>
<body>
  <!-- Navigation Bar -->
  <!-- <nav class="navbar navbar-expand-lg  navbar-dark bg-dark">
    
   
    <div class="collapse navbar-collapse" id="navbarText">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item ">
          <a class="nav-link" href="/pan-india-screen">Pan India</a>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/personal-screen"><span class="sr-only">(current)</span>Personal</a>
        </li>
        
        <li class="nav-item">
          <a class="nav-link" href="/bsp-party-screen">BSP Party Office</a>
        </li>
      </ul>
      
       
        <form class="form-inline">
          <a class="nav-link btn btn-primary" href="/personal-screen-group-create" style="margin-right: 10px;">Create Group</a>
          
          <a class="nav-link btn btn-warning" href="/personal-screen-number-create"  style="margin-right: 10px;">Create Number</a>
          
        </form>
  
    </div>
  </nav> -->
  <%- include('partials/sidebar') %>
  <script>
    // Ensure fetchdata() runs when the page loads
    window.onload = fetchdata;
  </script>

<div class="container-count">
  <div id="statusText" style="margin-top: 15px; font-size: 16px;"></div>
  <br>
  <br>
  <b>
    <p id="count-number" style="font-size: 25px;"></p>
  </b>

</div>

  <div class="table-container">
    <table class="table">
      <thead class="thead-dark">
        <tr>
        
          <th>ID</th>
          <th>Group Type</th>
          <th>UserAccount</th>
          <th>Created At</th>
          <th>Updated At</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="groups-table-body">
        <!-- Phone numbers will be dynamically added here -->
      </tbody>
    </table>
  </div>
 

  <!-- Bootstrap JS and dependencies -->
  <script 
    src="https://code.jquery.com/jquery-3.2.1.slim.min.js" 
    integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" 
    crossorigin="anonymous">
  </script>
  <script 
    src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" 
    integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9JoAPpSa0z9I603Ct9r47jBWg9kQtQnx6D6/J" 
    crossorigin="anonymous">
  </script>
  <script 
    src="https://stackpath.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" 
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" 
    crossorigin="anonymous">
  </script>

  <script>
    function fetchgroups() {
      const domain = 'http://wtserver.scpl.it.com/group/fetchdetails';
      const jsonData = {
          logintableId: localStorage.getItem("user_id"),
      };
      fetch(domain, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(jsonData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch groups');
        }
        return response.json();
      })
      .then(data => {
        populateTable(data);
      })
      .catch(error => {
        console.error('Error:', error);
        alert('Failed to fetch groups.');
      });
    }
    function populateTable(data) {
    const tableBody = document.getElementById('groups-table-body');
    tableBody.innerHTML = ''; // Clear the table before populating

    data.forEach(group => {
      console.log("group", group)
      const row = document.createElement('tr');
      
      // Create table cells
      const idCell = document.createElement('td');
      idCell.textContent = group.id;

      const grouptypeCell = document.createElement('td');
      grouptypeCell.textContent = group.grouptype;

      const usernameCell = document.createElement('td');
      usernameCell.textContent = group.logintable.username;

      const createdAtCell = document.createElement('td');
      createdAtCell.textContent = new Date(group.createdAt).toLocaleString();

      const updatedAtCell = document.createElement('td');
      updatedAtCell.textContent = new Date(group.updatedAt).toLocaleString();

      const actionsCell = document.createElement('td');

      // Add Edit button
      const editButton = document.createElement('button');
      editButton.className = 'btn btn-primary btn-sm';
      editButton.textContent = 'Edit';
      editButton.style.marginRight = '10px'; // Add spacing between buttons
      editButton.addEventListener('click', () => editGroup(group));

      // Add Delete button
      const deleteButton = document.createElement('button');
      deleteButton.className = 'btn btn-danger btn-sm';
      deleteButton.textContent = 'Delete';
      deleteButton.addEventListener('click', () => deleteGroup(group));

      // Append buttons to actions cell
      actionsCell.appendChild(editButton);
      actionsCell.appendChild(deleteButton);

      // Append cells to the row
      row.appendChild(idCell);
      row.appendChild(grouptypeCell);
      row.appendChild(usernameCell);
      row.appendChild(createdAtCell);
      row.appendChild(updatedAtCell);
      row.appendChild(actionsCell);

      // Append row to the table body
      tableBody.appendChild(row);
    });
  }

  function editGroup(group) {
    alert(`Edit group: ${group.grouptype}`);
    window.location.href = `/personal-screen-group-edit/${group.id}/${group.grouptype}`; // Added code to pass the group id to the edit page
  }

  function deleteGroup(group) {
    const confirmDelete = confirm(`Are you sure you want to delete group: ${group.grouptype}?`);
    if (confirmDelete) {
      alert(`Group ${group.grouptype} deleted.`);
      // Implement your delete logic here

      const jsonData = [{
        id: group.id,
      }];
                  const domain = 'http://wtserver.scpl.it.com/group/delete';

            fetch(domain, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(jsonData)
            })
            .then(response => {
                if (!response.ok) {
                    alert("Error in Createing");
                    
                }
                return response.json();
            })
            .then(data => {
                console.log('Success:', data);
                alert('Group Deleted successfully!');
                window.location.href = '/personal-screen-group-list'; // Added code to navigate to /personal-screen after successful group creation
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Failed to create group.');
            });
    }
  }

    fetchgroups();
  </script>

<script src="../socket.io/socket.io.js"></script>
<script>

    const socket = io();
    socket.on('whatsapp-status', (data) => {
        if (data.scanned) {
            document.getElementById("statusText").innerHTML = `
                <p><strong>Status:</strong> Scanned ✅</p>
                <p><strong>Client Name:</strong> ${data.clientname}</p>
                <p><strong>Client Phone:</strong> ${data.clientphone}</p>
            `;
        } else {
            document.getElementById("statusText").innerHTML = "<p>Status: Not Scanned ❌</p>";
        }
    });
    socket.on('whatsapp-ready', (data) => {
        console.log("WhatsApp Web is ready! Reloading dashboard...");
        console.log("data", data)
        if (data.scanned) {
            document.getElementById("statusText").innerHTML = `
                <p><strong>Status:</strong> Scanned ✅</p>
                <p><strong>Client Name:</strong> ${data.clientname}</p>
                <p><strong>Client Phone:</strong> ${data.clientphone}</p>
            `;
        } else {
            document.getElementById("statusText").innerHTML = "<p>Status: Not Scanned ❌</p>";
        }
    });

    function chceckstatus(){
    let user_id = localStorage.getItem("user_id")
    console.log("user_id", user_id)
    if(user_id === null){
        window.location.href = '/login';
    }
}
chceckstatus();
</script>
</body>
</html>
